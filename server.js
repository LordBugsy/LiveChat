import express from 'express';
import mongoose from 'mongoose';
import cors from 'cors';
import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';

dotenv.config(); // to use environment variables
const app = express(); // to setup the express server

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: false }));

// we're doing it like that to "simulate" the __dirname variable in ES6 modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// if this throws an error, make sure to create a .env file in the root directory of your project
mongoose.connect(process.env.MONGO_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
});

// Schemas
const chatSchema = new mongoose.Schema({
    userId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User'  // Reference to the User model, we will use this to 'join' the data from both collections
    },
    message: String,
    // the _id will be automatically generated by MongoDB
});

const userSchema = new mongoose.Schema({
    username: String,
    profileColour: Number,
    // the _id will be automatically generated by MongoDB
});

// Models
const Chat = mongoose.model('Chat', chatSchema);
const User = mongoose.model('User', userSchema);

// API Routes
const generateRandomColour = () => {
    // not really a random colour, but it's good enough for this project
    const colours = Math.ceil(Math.random() * 5); // 1.png, 2.png, 3.png, 4.png, 5.png
    return colours;
}

// Create a new user
app.post('/api/users', async (req, res) => {
    // console.log('Received data:', req.body); // uncomment this line to see the data received from the client
    try {
        const newUser = new User({ 
            username: req.body.username,
            profileColour: generateRandomColour(),
        });
        await newUser.save();

        res.status(201).json({ message: 'User created successfully', user: newUser });
    } 

    catch (error) {
        res.status(400).json({ message: 'Couldn\'t create user. Have you provided a username?', error: error.message });
    }
});

// Delete all users
app.get('/api/users/delete', async (req, res) => {
    try {
        await User.deleteMany({});
        res.status(200).json({ message: 'All users deleted successfully' });
    } 

    catch (error) {
        res.status(404).json({ message: 'Couldn\'t delete any users.', error: error.message });
    }
});

// Delete all messages
app.get('/api/messages/delete', async (req, res) => {
    try {
        await Chat.deleteMany({});
        res.status(200).json({ message: 'All messages deleted successfully' });
    }

    catch (error) {
        res.status(404).json({ message: 'Couldn\'t delete any messages', error: error.message });
    }
});

// Post a message to the chat
app.post('/api/messages', async (req, res) => {
    try {
        const newMessage = new Chat(
            { 
                userId: req.body.userId,
                message: req.body.message 
            });
        await newMessage.save(); 
        res.status(201).json({ message: 'Message sent successfully', chat: newMessage });
    } 

    catch (error) {
        res.status(400).json({ message: 'Couldn\'t send message. Have you provided a user ID and a message?', error: error.message });
    }
});

// Get all messages
app.get('/api/messages', async (req, res) => {
    try {
        // Populate the user data from the User collection
        const messages = await Chat.find().populate('userId', 'username profileColour');
        res.status(200).json(messages);
    } 
    
    catch (error) {
        res.status(500).json({ message: 'An error occurred while retrieving messages.', error: error.message });
    }
});

// Serve the static files from the React app
app.use(express.static(path.join(__dirname, 'build')));

// Handle any requests that don't match the API routes 
app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'build', 'index.html'));
});

// Start the server
const PORT = process.env.PORT || 5172; // localhost:5172. We're using this port because 5173 is used by the React app (using it for the API would cause a conflict)

app.listen(PORT, () => console.log(`Server is running on port ${PORT} ğŸš€`));
